---
title: "Kepler FBMSY"
output: html_document
date: "2024-10-21"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown
```{r}
library(devtools)
options("install.lock"=FALSE)
devtools::install("/Users/ylvasofietollefsen/Documents/Uio/Master/GMJMCMC")
library(FBMS)
```

```{r}
X <- read.csv("https://raw.githubusercontent.com/aliaksah/EMJMCMC2016/master/supplementaries/BGNLM/kepler%20and%20mass/exa1.csv")
summary(X)


# df <- as.data.frame(cbind(MajorAxis = X[,5], X[,-5]))
# sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.75,0.25))
# train <- df[sample, ]
# test  <- df[!sample, ]

```

```{r}
train <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/train.csv")
sum(train$MajorAxis<=0.5)
train$MajorAxis[train$MajorAxis>0.5]
plot(density(train$MajorAxis))
test <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/test.csv")

summary(test)

library(pmlbr)
```


```{r}
model <- gam(MajorAxis ~ s(PlanetaryMassJpt),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(PlanetaryDensJpt),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(HostStarTempK),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(HostStarMetallicity),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(HostStarRadiusSlrRad),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(Eccentricity),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(PeriodDays),
             data = train)
# Plot the smooth terms
plot(model)
model <- gam(MajorAxis ~ s(RadiusJpt),
             data = train)
# Plot the smooth terms
plot(model)
```

```{r}
transforms <- c("p0","p2")
probs <- gen.probs.gmjmcmc(transforms)
params <- gen.params.gmjmcmc(train)
probs$gen <- c(0.3,0.3,0.1,0.1,0.1,0.1)
time_single <- system.time({
  # Your code here
  model_single <- fbms(formula = MajorAxis ~ ., data = train, transforms = transforms,
                       method = "gmjmcmc", probs = probs, params = params, P = 100, N.init = 1000, N.final = 3000)
})
```

```{r}
summm <- summary(model_single,pop="best")
summm$
```

```{r}
probs <- gen.probs.gmjmcmc(transforms)
params <- gen.params.gmjmcmc(train)
probs$gen <- c(0.22,0.22,0.06,0.06,0.22,0.22)
params$feat$pop.max <- 30
time_single_long <- system.time({
  # Your code here
  model_single_long <- fbms(formula = MajorAxis ~ ., data = train, transforms = transforms,
                       method = "gmjmcmc", loglik.pi = gaussian.loglik,
                       loglik.alpha = gaussian.loglik.alpha, probs = probs,
                       params = params, P = 50, N.init = 1000, N.final = 3000)
})
```
```{r}
probs <- gen.probs.gmjmcmc(transforms)
params <- gen.params.gmjmcmc(train)
probs$gen <- c(0.22,0.22,0.06,0.06,0.22,0.22)
time_parallel <- system.time({
  # Your code here
  model_single <- fbms(formula = MajorAxis ~ .,runs = 5, cores = 5, data = train, transforms = transforms,
                       method = "gmjmcmc.parallel", loglik.pi = gaussian.loglik,
                       loglik.alpha = gaussian.loglik.alpha, probs = probs,
                       params = params, P = 100, N.init = 1000, N.final = 3000)
})
```

```{r}
probs <- gen.probs.gmjmcmc(transforms)
params <- gen.params.gmjmcmc(train)
probs$gen <- c(0.22,0.22,0.06,0.06,0.22,0.22)
params$feat$pop.max <- 30
time_parallel_long <- system.time({
  # Your code here
  model_single <- fbms(formula = MajorAxis ~ .,runs = 5, cores = 5, data = train, transforms = transforms,
                       method = "gmjmcmc.parallel", loglik.pi = gaussian.loglik,
                       loglik.alpha = gaussian.loglik.alpha, probs = probs,
                       params = params, P = 100, N.init = 1000, N.final = 3000)
})
```

```{r}
time_parallel
time_parallel_long
time_single
time_single_long

```

```{r}


## locale-specific version of date()
format(Sys.time(), "%Y-%m-%d_%H:%M")
now <- format(Sys.time(), "%Y-%m-%d_%H:%M")
paste("hei_",now,".csv", sep="")

```

```{r}
summary(model_single)
```
```{r}
response_data <- data.frame(real=(train$HostStarMassSlrMas*train$PeriodDays^2)^(1/3), temp = (train$HostStarTempK*train$PeriodDays^2)^(1/3), tempsq = (train$HostStarTempK^2*train$PeriodDays^2)^(1/3),tempth = (train$HostStarTempK^3*train$PeriodDays^2)^(1/3), rad = (train$HostStarRadiusSlrRad*train$PeriodDays^2)^(1/3))
cor(response_data)
cor(response_data, method="kendall")

```

```{r}
summary(model_single_long, tol = 0.1, pop="all")
```

```{r}
train <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/train.csv")[,-1]
test <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/test.csv")[,-1]

```
```{r}
average_correlation <- function (test, features){
  X <- test[,-1]
  all_features <- c("troot(x4*x4*x6)", features)
  corr_df <- matrix(NA, nrow(X), length(all_features))
  colnames(X) <- paste0("x", 1:ncol(X))
  colnames(corr_df) <- all_features
  for (f in seq_along(all_features)) {
    corr_df[, f] <- eval(parse(text = all_features[f]), envir = as.data.frame(X))
  }
  corr_df <- cor(corr_df)
  return(corr_df)
}

average_correlation(train,c("x4*x4","x4","troot(x4*x4*x9)","troot(x4*x4)","troot(x4)*(x9*x4)","x9*troot(p2(x4))"))

```

