FifthFeature = feature5,
)
source("~/Documents/Uio/Master/Experiments/Abalone/experiment.R")
source("~/Documents/Uio/Master/Experiments/Abalone/experiment_single_mult_cores.R")
mclapply
source("~/Documents/Uio/Master/Experiments/Abalone/experiment.R")
test
train
dim(train)
dim(test)
# MAE
preds <- predict(model,test[,-1])$aggr$mean
predict
# Make predictions on the test set
predictions_rf <- predict(model_rf, newdata = test[,-1])
date <- "2024-12-05_09_20"
results <- read.csv(paste("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/","results_",date,".csv", sep=""))
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
rownames <- c("Correlation","MAE","RMSE","Time")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Correlation",experiment] <- mean(exp_df$Correlation)
Metrics["MAE",experiment] <- mean(exp_df$MAE, na.rm = TRUE)
Metrics["RMSE",experiment] <- mean(exp_df$RMSE, na.rm = TRUE)
Metrics["Time",experiment] <- mean(exp_df$Time)
}
Metrics
setwd("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone")
# List all files with the pattern "result_i.csv"
file_list <- list.files(pattern = "^result_\\d+\\.csv$")
# Read and combine all files into a single data frame
merged_data <- do.call(rbind, lapply(file_list, read.csv))
# Save the merged file to the same directory (or specify another path)
write.csv(merged_data, "merged_results.csv", row.names = FALSE)
# Print the first few rows to verify the merge
head(merged_data)
merged_data
setwd("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/ 2024-12-12_13_15")
# List all files with the pattern "result_i.csv"
file_list <- list.files(pattern = "^result_\\d+\\.csv$")
# Read and combine all files into a single data frame
merged_data <- do.call(rbind, lapply(file_list, read.csv))
# Save the merged file to the same directory (or specify another path)
write.csv(merged_data, "merged_results.csv", row.names = FALSE)
# Print the first few rows to verify the merge
head(merged_data)
merged_data
setwd("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/2024-12-12_13_15")
# List all files with the pattern "result_i.csv"
file_list <- list.files(pattern = "^result_\\d+\\.csv$")
# Read and combine all files into a single data frame
merged_data <- do.call(rbind, lapply(file_list, read.csv))
# Save the merged file to the same directory (or specify another path)
write.csv(merged_data, "merged_results.csv", row.names = FALSE)
# Print the first few rows to verify the merge
head(merged_data)
merged_data
setwd("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/2024-12-12_13_15")
setwd("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/ 2024-12-12_13_15")
# List all files with the pattern "result_i.csv"
file_list <- list.files(pattern = "^result_\\d+\\.csv$")
# Read and combine all files into a single data frame
merged_data <- do.call(rbind, lapply(file_list, read.csv))
# Save the merged file to the same directory (or specify another path)
write.csv(merged_data, "merged_results.csv", row.names = FALSE)
# Print the first few rows to verify the merge
head(merged_data)
merged_data
setwd("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/ 2024-12-12_13_15")
# List all files with the pattern "result_i.csv"
file_list <- list.files(pattern = "^results_\\d+\\.csv$")
# Read and combine all files into a single data frame
merged_data <- do.call(rbind, lapply(file_list, read.csv))
# Save the merged file to the same directory (or specify another path)
write.csv(merged_data, "merged_results.csv", row.names = FALSE)
# Print the first few rows to verify the merge
head(merged_data)
merged_data
date <- "2024-12-05_09_20"
results <- read.csv(paste("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/ 2024-12-12_13_15","merged_results",date,".csv", sep=""))
date <- "2024-12-05_09_20"
results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/ 2024-12-12_13_15")
results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/ 2024-12-12_13_15/merged_results.csv")
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
rownames <- c("Correlation","MAE","RMSE","Time")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Correlation",experiment] <- mean(exp_df$Correlation)
Metrics["MAE",experiment] <- mean(exp_df$MAE, na.rm = TRUE)
Metrics["RMSE",experiment] <- mean(exp_df$RMSE, na.rm = TRUE)
Metrics["Time",experiment] <- mean(exp_df$Time)
}
Metrics
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv")
install.packages("mgcv")
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv")
df
summary(df)
head(df)
column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
column_names = c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV')
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv", names = column_names)
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV')
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv")
names(df) <- column_names
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv")
head(df)
dim(df)
data <- read_delim(
file = "/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv",  # Path to the file
delim = "\\s+",                 # Use regular expression for whitespace as delimiter
col_names = column_names        # Set column names
)
df <- read.table("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv", sep = "  ")
library(readr)
install.packages(readr)
install.packages("readr")
library(readr)
# Define column names
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS',
'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV')
# Read the file with whitespace delimiter
df <- read_delim(
file = "/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv",
delim = "\\s+",            # Regular expression for one or more spaces
col_names = column_names   # Assign column names
)
# Read the file with whitespace delimiter
df <- read_delim(
file = "/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv",
delim = "  ",            # Regular expression for one or more spaces
col_names = column_names   # Assign column names
)
head(df)
# Read the file with whitespace delimiter
df <- read_delim(
file = "/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv",
delim = "   ",            # Regular expression for one or more spaces
col_names = column_names   # Assign column names
)
# Read the file with whitespace delimiter
df <- read_delim(
file = "/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv",
delim = " ",            # Regular expression for one or more spaces
col_names = column_names   # Assign column names
)
head(df)
df <- read.table("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv")
names(df) <- column_names
dim(df)
head(df)
library(mgcv)
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV')
df <- read.table("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/housing.csv")
names(df) <- column_names
model <- gam(MEDV ~ s(CRIM) + s(ZN) + s(INDUS) + s(CHAS) + s(NOX) + s(RM) +
s(AGE) + s(DIS) + s(RAD) + s(TAX) + s(PTRATIO) + s(B) + s(LSTAT),
data = df)
# Summarize the model
summary(model)
# Plot the smooth terms
plot(model, pages = 1)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(CRIM)
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(CRIM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(CRIM) + s(ZN),
data = df)
# Plot the smooth terms
plot(model)
for (predictor in  column_names[-1]) {
# Dynamically construct the formula
formula <- as.formula(paste('MEDV ~ s(', predictor, ')', sep = ''))
# Fit the model
model <- gam(formula, data = df)
# Plot the smooth term
plot(model, main = paste('Effect of', predictor, 'on MEDV'))
}
model <- gam(MEDV ~ s(CRIM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(ZN),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(ZN),
data = df)
model <- gam(MEDV ~ s(ZN),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(INDUS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(CHAS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(NOX),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(RM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(AGE),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(DIS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(RAD),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(TAX),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(PTRATIO),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(B),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(LSTAT),
data = df)
# Plot the smooth terms
plot(model)
knitr::opts_chunk$set(echo = TRUE)
summary(df)
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/train.csv")
set.seed(24)
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/train.csv")
df["Sex_F"]=as.numeric(df$Sex=="F")
df["Sex_M"]=as.numeric(df$Sex=="M")
df=df[-1]
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.75,0.25))
train <- df[sample, ]
test  <- df[!sample, ]
X_test <- test[-8]
y_test <- test$Rings
summary(df)
set.seed(24)
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/train.csv")
df["Sex_F"]=as.numeric(df$Sex=="F")
df["Sex_M"]=as.numeric(df$Sex=="M")
#df=df[-1]
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.75,0.25))
train <- df[sample, ]
test  <- df[!sample, ]
X_test <- test[-8]
y_test <- test$Rings
set.seed(24)
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Abalone/train.csv")
df["Sex_F"]=as.numeric(df$Sex=="F")
df["Sex_M"]=as.numeric(df$Sex=="M")
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.75,0.25))
train <- df[sample, ]
test  <- df[!sample, ]
X_test <- test[-8]
y_test <- test$Rings
summary(df)
summary(df)
model <- gam(Rings ~ s(Length),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Diameter),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Height),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Whole.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Shucked.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Viscera.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Shell.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Sex_F),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Sex_M),
data = df)
# Plot the smooth terms
plot(model)
summary(df)
model <- gam(Rings ~ s(Length),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Diameter),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Height),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Whole.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Shucked.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Viscera.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Shell.weight),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(Rings ~ s(Sex_F),
data = df)
source("~/Documents/Uio/Master/Experiments/Housing/Housing_test_nonlin.R")
source("~/Documents/Uio/Master/Experiments/Housing/Housing_test_nonlin.R")
source("~/Documents/Uio/Master/Experiments/Housing/Housing_test_nonlin.R")
model <- gam(MEDV ~ s(TAX),
data = df)
model <- gam(MEDV ~ s(RAD),
data = df)
model <- gam(MEDV ~ s(DIS),
data = df)
model <- gam(MEDV ~ s(AGE),
data = df)
model <- gam(MEDV ~ s(RM),
data = df)
model <- gam(MEDV ~ s(NOX),
data = df)
model <- gam(MEDV ~ s(CHAS),
data = df)
model <- gam(MEDV ~ s(INDUS),
data = df)
model <- gam(MEDV ~ s(ZN),
data = df)
source("~/Documents/Uio/Master/Experiments/Housing/Housing_test_nonlin.R")
model <- gam(MEDV ~ s(LSTAT),
data = df)
model <- gam(MEDV ~ s(B),
data = df)
model <- gam(MEDV ~ s(PTRATIO),
data = df)
model <- gam(MEDV ~ s(TAX),
data = df)
model <- gam(MEDV ~ s(DIS),
data = df)
model <- gam(MEDV ~ s(AGE),
data = df)
model <- gam(MEDV ~ s(RM),
data = df)
model <- gam(MEDV ~ s(CRIM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(ZN),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(INDUS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(NOX),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(RM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(AGE),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(DIS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(TAX),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(PTRATIO),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(B),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(LSTAT),
data = df)
# Plot the smooth terms
plot(model)
source("~/Documents/Uio/Master/Experiments/Housing/Housing_test_nonlin.R")
model <- gam(MEDV ~ s(CRIM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(ZN),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(INDUS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(ZN),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(INDUS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(NOX),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(RM),
data = df)
model <- gam(MEDV ~ s(CRIM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(ZN),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(INDUS),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(NOX),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(RM),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(AGE),
data = df)
# Plot the smooth terms
plot(model)
model <- gam(MEDV ~ s(DIS),
data = df)
# Plot the smooth terms
plot(model)
set.seed(2024)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.75,0.25))
train <- df[sample, ]
test  <- df[!sample, ]
write.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/test.csv", row.names = FALSE)
write.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/train.csv", row.names = FALSE)
write.csv(train,"/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/train.csv", row.names = FALSE)
write.csv(test,"/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/test.csv", row.names = FALSE)
dim(train)
dim(test)
summary(df)
sum(is.na(df))
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV')
df <- read.table("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/train.csv")
df <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/train.csv")
test <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/test.csv")
names(df) <- column_names
library(mgcv)
install_github("ylvast/GMJMCMC@FBMSY")
library(mgcv)
library(devtools)
install_github("ylvast/GMJMCMC@FBMSY")
library(mgcv)
library(devtools)
install_github("ylvast/GMJMCMC@FBMSY")
